{"name": "test_batch_upload_files", "historyId": "6a0414d5264ee30d5b9f2fa2d8a31d6d", "stop": 1638523029010, "start": 1638523029009, "testCaseId": "0e9d062b5c995fc0c4ee7a868ee09037", "labels": [{"name": "suite", "value": "Contract_related_test"}, {"name": "parentSuite", "value": "testcases"}, {"name": "subSuite", "value": "Test_Contract"}, {"name": "host", "value": "DESKTOP-BQ40Q36"}, {"name": "thread", "value": "224560-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.Contract_related_test"}], "fullName": "testcases.Contract_related_test.Test_Contract#test_batch_upload_files", "statusDetails": {"trace": "self = <testcases.Contract_related_test.Test_Contract object at 0x000001EA093B8198>\n\n    def test_batch_upload_files(self):\n        url = \"http://172.16.11.40:8082/file/uploadBatch\"\n        token = yamlUtil().read_relation_yaml()\n        file_1 = open(r\"E:\\HydProductTest\\auttest\\jiekou\\File_upload\\10.png\", \"rb\")\n        file_2 = open(r\"E:\\HydProductTest\\auttest\\jiekou\\File_upload\\1.jpg\", \"rb\")\n        # print(file_1)\n        # print(file_2)\n        data = [{file_1}, {file_2}]\n        print(data)\n>       rep = requests.request(\"POST\", url, headers=token, files=data)\n\nContract_related_test.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nC:\\Python\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nC:\\Python\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nC:\\Python\\lib\\site-packages\\requests\\models.py:317: in prepare\n    self.prepare_body(data, files, json)\nC:\\Python\\lib\\site-packages\\requests\\models.py:505: in prepare_body\n    (body, content_type) = self._encode_files(files, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfiles = [{<_io.BufferedReader name='E:\\\\HydProductTest\\\\auttest\\\\jiekou\\\\File_upload\\\\10.png'>}, {<_io.BufferedReader name='E:\\\\HydProductTest\\\\auttest\\\\jiekou\\\\File_upload\\\\1.jpg'>}]\ndata = {}\n\n    @staticmethod\n    def _encode_files(files, data):\n        \"\"\"Build the body for a multipart/form-data request.\n    \n        Will successfully encode files when passed as a dict or a list of\n        tuples. Order is retained if data is a list of tuples but arbitrary\n        if parameters are supplied as a dict.\n        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)\n        or 4-tuples (filename, fileobj, contentype, custom_headers).\n        \"\"\"\n        if (not files):\n            raise ValueError(\"Files must be provided.\")\n        elif isinstance(data, basestring):\n            raise ValueError(\"Data must not be a string.\")\n    \n        new_fields = []\n        fields = to_key_val_list(data or {})\n        files = to_key_val_list(files or {})\n    \n        for field, val in fields:\n            if isinstance(val, basestring) or not hasattr(val, '__iter__'):\n                val = [val]\n            for v in val:\n                if v is not None:\n                    # Don't call str() on bytestrings: in Py3 it all goes wrong.\n                    if not isinstance(v, bytes):\n                        v = str(v)\n    \n                    new_fields.append(\n                        (field.decode('utf-8') if isinstance(field, bytes) else field,\n                         v.encode('utf-8') if isinstance(v, str) else v))\n    \n>       for (k, v) in files:\nE       ValueError: not enough values to unpack (expected 2, got 1)\n\nC:\\Python\\lib\\site-packages\\requests\\models.py:141: ValueError", "message": "ValueError: not enough values to unpack (expected 2, got 1)"}, "uuid": "4d49f61d-f78e-448c-b37b-f95bede982b3", "status": "broken"}